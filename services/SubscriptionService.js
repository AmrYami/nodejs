//Generated By Amr Awwad
const asyncHandler = require("express-async-handler");
const ApiErors = require("../utils/ApiErors");
const SubscriptionsModel = require("../models/SubscriptionModel");
const stripe = require("stripe")(process.env.STRIPE_TOKEN);


exports.createSubscription = asyncHandler(async (req, res) => {

  var items = [
    {
      price: req.body.priceId,
      plan: req.body.planId
    },
  ]
  const subscription = await stripe.subscriptions.create({
      customer: req.body.customerId,
      items: items,
    });
  //  const subscription = await stripe.tokens.create(param);

   param.stripId = subscription.id;
  const subscriptionMO = await SubscriptionsModel.create({
    type: 'subscription',
    subscription: {
      number: '4242424242424242',
      exp_month: 9,
      exp_year: 2022,
      cvc: '314',
      stripId: paymentMethod.id,
    },
  });


  res.status(201).json({ data: paymentMethod });
});

exports.getSubscriptions = asyncHandler(async (req, res) => {
  const page = req.query.page * 1 || 1;
  const limit = req.query.limit * 1 || 5;
  const skip = (page - 1) * limit;
  const subscriptions = await SubscriptionsModel.find({}).skip(skip).limit(limit);
  res.status(200).json({ count: subscriptions.length, data: subscriptions });
});

exports.getSubscription = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  // const subscription = await SubscriptionsModel.findById(id);
  const subscription = await stripe.subscriptions.retrieve(id);
  if (!subscription) {
    return next(new ApiErors(`not found this ${id}`, 404));
  }
  res.status(200).json({ data: subscription });
});

exports.updateSubscription = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  let param = {};
  param.name = req.body.name;
  param.phone = req.body.phone;
  param.email = req.body.email;


  const subscriptionData = stripe.subscriptions.update(
    id,
    param,
    function(err, subscription) {
        // asynchronously called
        if(err) {
            console.log(err);
            // res('REQUEST ERROR');
        } 
});

// const subscription_id = subscriptionStripe.id;

  const subscription = await SubscriptionsModel.findOneAndUpdate(
    { subscription_id: id },
    param,
    { new: true }
  );
  if (!subscription) {
    return next(new ApiErors(`not found this ${id}`, 404));
  }
  res.status(200).json({ data: subscription });
});

exports.deleteSubscription = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  const subscription = await SubscriptionsModel.findByIdAndDelete(id);
  if (!subscription) {
    return next(new ApiErors(`not found this ${id}`, 404));
  }
  res.status(204).send();
});
