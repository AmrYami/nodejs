//Generated By Amr Awwad
const asyncHandler = require("express-async-handler");
const ApiErors = require("../utils/ApiErors");
const PaymentModel = require("../models/PaymentModel");
const stripe = require("stripe")(process.env.STRIPE_TOKEN);


exports.createPayment = asyncHandler(async (req, res) => {
  
  const payment_method_types = req.body.payment_method_types;

  const line_items = [
    {
      price: req.body.priceId,
      quantity: 1,
    },
    {
      plan: req.body.planId,
      quantity: 1,
    }
  ];
  const stripeCustomerId = req.body.stripeCustomerId;
    const payment = await stripe.checkout.sessions.create(
      {
        mode: "subscription",
        payment_method_types: [payment_method_types],
        line_items: line_items,
        success_url: "<http://localhost:3000/subscription/success>",
        cancel_url: "<http://localhost:3000/subscription/failed>",
        customer: stripeCustomerId,
      });
    
  const paymentMO = await PaymentModel.create(
    {
      mode: "subscription",
      payment_method_types: [payment_method_types],
      line_items: line_items,
      success_url: "<http://localhost:3000/subscription/success>",
      cancel_url: "<http://localhost:3000/subscription/failed>",
      customer: stripeCustomerId,
      stripId: payment.id
    }
  );


  res.status(201).json({ data: payment });
});

exports.getPayments = asyncHandler(async (req, res) => {
  const page = req.query.page * 1 || 1;
  const limit = req.query.limit * 1 || 5;
  const skip = (page - 1) * limit;
  const payments = await PaymentModel.find({}).skip(skip).limit(limit);
  res.status(200).json({ count: payments.length, data: payments });
});

exports.getPayment = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  // const payment = await PaymentModel.findById(id);
  const payment = await stripe.payments.retrieve(id);
  if (!payment) {
    return next(new ApiErors(`not found this ${id}`, 404));
  }
  res.status(200).json({ data: payment });
});

exports.updatePayment = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  let param = {};
  param.name = req.body.name;
  param.phone = req.body.phone;
  param.email = req.body.email;


  const paymentData = stripe.payments.update(
    id,
    param,
    function(err, payment) {
        // asynchronously called
        if(err) {
            console.log(err);
            // res('REQUEST ERROR');
        } 
});

// const payment_id = paymentStripe.id;

  const payment = await PaymentModel.findOneAndUpdate(
    { payment_id: id },
    param,
    { new: true }
  );
  if (!payment) {
    return next(new ApiErors(`not found this ${id}`, 404));
  }
  res.status(200).json({ data: payment });
});

exports.deletePayment = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  const payment = await PaymentModel.findByIdAndDelete(id);
  if (!payment) {
    return next(new ApiErors(`not found this ${id}`, 404));
  }
  res.status(204).send();
});
